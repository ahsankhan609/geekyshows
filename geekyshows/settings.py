"""
Django settings for geekyshows project.

Generated by 'django-admin startproject' using Django 4.1.5.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""

from pathlib import Path

# Importing Environment variables
import environ
env = environ.Env()
environ.Env.read_env()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']
INTERNAL_IPS = ['127.0.0.1']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]

EXTERNAL_APPS = [
    'course',
    'enroll',
    'fees',
    'result',
    'dj_messages',
    'dj_auth',
    'dj_miniblog',
    'pagecounter',
    'caching',
    'debug_toolbar',
    'signaling',
    'trackip',
]

INSTALLED_APPS += EXTERNAL_APPS

# settings.py for dj_miniblog
LOGIN_REDIRECT_URL = 'dj-miniblog-dashboard'

# If you have other applications that are using the Django authentication system and you want to customize the redirect URL for each one, you can define a separate LOGIN_REDIRECT_URL setting in the settings.py file for each application. For example:

# settings.py for app1
# LOGIN_REDIRECT_URL = 'app1-dashboard'

# settings.py for app2
# LOGIN_REDIRECT_URL = 'app2-dashboard'

# Then, in the views for each application, you can use the reverse function to generate the correct URL for the redirect:
# views.py for app1
# from django.urls import reverse

# @login_required
# def dashboard(request):
#     return redirect(reverse('app1-dashboard'))

# views.py for app2
# from django.urls import reverse

# @login_required
# def dashboard(request):
#     return redirect(reverse('app2-dashboard'))

MIDDLEWARE = [
    'debug_toolbar.middleware.DebugToolbarMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'geekyshows.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': ['templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'geekyshows.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.sqlite3',
#         'NAME': BASE_DIR / 'db.sqlite3',
#     }
# }

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql_psycopg2',
        'NAME': env('DATABASE_NAME'), 
        'USER': env('DATABASE_USER'),
        'PASSWORD': env('DATABASE_PASSWORD'),
        'HOST': env('DATABASE_HOST'), 
        'PORT': env('DATABASE_PORT'),
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Asia/Kolkata' # Set time zone for the session cookie. Default is 'UTC'.'https://en.wikipedia.org/wiki/List_of_tz_database_time_zones'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/

import os
STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static')
]

MEDIA_ROOT = os.path.join(BASE_DIR, 'media') # Uploades files with the upload_to argument
MEDIA_URL = '/media/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Session Related Default Settings

# set default session cookie age
SESSION_COOKIE_AGE = 400

# change default session name
SESSION_COOKIE_NAME = 'NEW-SESSION-NAME'

# change default session cookie path
#SESSION_COOKIE_PATH = '/home'

# Make session cookie secure - IT WORKS ON HTTPS ONLY - ACTIVATE IT ON PRODUCTION SERVER
#SESSION_COOKIE_SECURE = True

# Expire session on Browser close - It is recommended on banks website or wherever important data is handeled.
SESSION_EXPIRE_AT_BROWSER_CLOSE = True

# To save session in the file, we will override the basic engine settings
#SESSION_ENGINE = 'django.contrib.sessions.backends.file'
#SESSION_FILE_PATH = os.path.join(BASE_DIR, 'sessions') # create sessions folder in the path

### Configure as Django Redis backend - Redis server must be active for this purpose.
CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": "redis://127.0.0.1:6379/1",
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        }
    }
}